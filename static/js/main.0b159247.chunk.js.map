{"version":3,"sources":["components/Answer.jsx","components/Quiz.jsx","components/Result.jsx","components/Start.jsx","App.js","reportWebVitals.js","index.js"],"names":["Answer","props","onClick","e","getAnswerIndex","answerIndex","className","answer","Quiz","question","correctIndex","addScore","style","width","progress","answers","map","index","Result","isSuccess","score","Start","play","App","useState","isPlaying","setIsPlaying","setScore","questionIndex","setQuestionIndex","numberOfQuestions","data","questions","length","addedScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8/DAGe,SAASA,EAAOC,GAO3B,OACI,qBAAKC,QANT,SAAsBC,GAElBF,EAAMG,eAAeH,EAAMI,cAICC,UAAU,SAAtC,SACI,4BAAIL,EAAMM,W,MCRP,SAASC,EAAKP,GAEzB,SAASG,EAAeC,GAEhBA,IAAgBJ,EAAMQ,SAASC,aAC/BT,EAAMU,SAAS,GAEfV,EAAMU,SAAS,GAIvB,OACI,qCACI,qBAAKL,UAAU,eAAf,SACI,qBAAKA,UAAU,WAAWM,MAAO,CAACC,MAAwB,IAAjBZ,EAAMa,SAAiB,SAExE,sBAAKR,UAAU,OAAf,UACI,mBAAGA,UAAU,WAAb,SAAyBL,EAAMQ,SAASA,WACxC,qBAAKH,UAAU,UAAf,SACCL,EAAMQ,SAASM,QAAQC,KAAI,SAACT,EAAQU,GAAT,OAAmB,cAAC,EAAD,CAAQV,OAAQA,EAAoBH,eAAgBA,EAAgBC,YAAaY,GAApDA,c,MCpBzE,SAASC,EAAOjB,GAC3B,IAAIkB,EAAYlB,EAAMmB,MAAQ,EAC9B,OACI,sBAAKd,UAAYa,EAA4B,iBAAhB,cAA7B,UACI,4BAAIA,EAAY,mBAAqB,aACrC,+CAAkBlB,EAAMmB,Y,MCLrB,SAASC,EAAMpB,GAC1B,OACI,qCACI,gEACA,wBAAQC,QAASD,EAAMqB,KAAvB,4BCmCGC,MApCf,WAAgB,IAAD,EACoBC,oBAAS,GAD7B,mBACPC,EADO,KACIC,EADJ,OAEYF,mBAAS,GAFrB,mBAEPJ,EAFO,KAEAO,EAFA,OAG4BH,mBAAS,GAHrC,mBAGPI,EAHO,KAGQC,EAHR,KAKVC,EAAoBC,EAAKC,UAAUC,OAevC,OAAKR,EAGDG,IAAkBE,EAAoB,EAClC,cAAC,EAAD,CAAQV,MAAOA,IAGrB,cAAC,EAAD,CACCX,SAAUsB,EAAKC,UAAUJ,GACzBjB,SAlBH,SAAkBuB,GACjBP,EAASP,EAAQc,GAGbN,EAAgBE,EAAoB,GACvCD,EAAiBD,EAAgB,IAchCd,SAAUc,EAAgBE,IATrB,cAAC,EAAD,CAAOR,KAdf,WACCI,GAAa,OCFAS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.0b159247.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Answer.css'\r\n\r\nexport default function Answer(props) {\r\n\r\n    function chooseAnswer(e) {\r\n        // Send the answer index to the parent element\r\n        props.getAnswerIndex(props.answerIndex);\r\n    }\r\n\r\n    return (\r\n        <div onClick={chooseAnswer} className=\"answer\">\r\n            <p>{props.answer}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport Answer from './Answer'\r\nimport './Quiz.css'\r\n\r\nexport default function Quiz(props) {\r\n\r\n    function getAnswerIndex(answerIndex) {\r\n        // Receive answer index and calculate the score value\r\n        if (answerIndex === props.question.correctIndex) {\r\n            props.addScore(1);\r\n        } else {\r\n            props.addScore(0);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"progress-bar\">\r\n                <div className=\"progress\" style={{width: props.progress * 100 + '%'}}></div>\r\n            </div>\r\n        <div className=\"quiz\">\r\n            <p className=\"question\">{props.question.question}</p>\r\n            <div className=\"answers\">\r\n            {props.question.answers.map((answer, index) => <Answer answer={answer} key={index} getAnswerIndex={getAnswerIndex} answerIndex={index} />)}\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport './Result.css'\r\n\r\nexport default function Result(props) {\r\n    let isSuccess = props.score > 0\r\n    return (\r\n        <div className={!isSuccess ? \"result fail\" : \"result success\"}>\r\n            <p>{isSuccess ? \"Congratulations!\" : \"Sadly :(\"}</p>\r\n            <p>Your score is {props.score}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './Start.css'\r\n\r\nexport default function Start(props) {\r\n    return (\r\n        <>\r\n            <h1>Confident with your knowledge?</h1>\r\n            <button onClick={props.play}>Test it now</button>\r\n        </>\r\n    )\r\n}","import data from \"./quiz.json\";\nimport Quiz from \"./components/Quiz\";\nimport { useState } from \"react\";\nimport Result from \"./components/Result\";\nimport Start from \"./components/Start\";\n\nfunction App() {\n\tconst [isPlaying, setIsPlaying] = useState(false);\n\tconst [score, setScore] = useState(0);\n\tconst [questionIndex, setQuestionIndex] = useState(0);\n\n\tlet numberOfQuestions = data.questions.length;\n\n\tfunction play() {\n\t\tsetIsPlaying(true);\n\t}\n\n\tfunction addScore(addedScore) {\n\t\tsetScore(score + addedScore);\n\n\t\t// Go to next question\n\t\tif (questionIndex < numberOfQuestions - 1) {\n\t\t\tsetQuestionIndex(questionIndex + 1);\n\t\t}\n\t}\n\n\tif (!isPlaying) {\n\t\treturn <Start play={play} />;\n\t}\n\tif (questionIndex === numberOfQuestions - 1) {\n\t\treturn <Result score={score} />;\n\t} else {\n\t\treturn (\n\t\t\t<Quiz\n\t\t\t\tquestion={data.questions[questionIndex]}\n\t\t\t\taddScore={addScore}\n\t\t\t\tprogress={questionIndex / numberOfQuestions}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}